/* automatically generated by rust-bindgen 0.60.1 */

pub const XCB_XIM_CM_DATA_SIZE: u32 = 20;
pub const XCB_XIM_PROTOCOLMAJORVERSION: u32 = 0;
pub const XCB_XIM_PROTOCOLMINORVERSION: u32 = 0;
pub const XCB_XIM_CONNECT: u32 = 1;
pub const XCB_XIM_CONNECT_REPLY: u32 = 2;
pub const XCB_XIM_DISCONNECT: u32 = 3;
pub const XCB_XIM_DISCONNECT_REPLY: u32 = 4;
pub const XCB_XIM_AUTH_REQUIRED: u32 = 10;
pub const XCB_XIM_AUTH_REPLY: u32 = 11;
pub const XCB_XIM_AUTH_NEXT: u32 = 12;
pub const XCB_XIM_AUTH_SETUP: u32 = 13;
pub const XCB_XIM_AUTH_NG: u32 = 14;
pub const XCB_XIM_ERROR: u32 = 20;
pub const XCB_XIM_OPEN: u32 = 30;
pub const XCB_XIM_OPEN_REPLY: u32 = 31;
pub const XCB_XIM_CLOSE: u32 = 32;
pub const XCB_XIM_CLOSE_REPLY: u32 = 33;
pub const XCB_XIM_REGISTER_TRIGGERKEYS: u32 = 34;
pub const XCB_XIM_TRIGGER_NOTIFY: u32 = 35;
pub const XCB_XIM_TRIGGER_NOTIFY_REPLY: u32 = 36;
pub const XCB_XIM_SET_EVENT_MASK: u32 = 37;
pub const XCB_XIM_ENCODING_NEGOTIATION: u32 = 38;
pub const XCB_XIM_ENCODING_NEGOTIATION_REPLY: u32 = 39;
pub const XCB_XIM_QUERY_EXTENSION: u32 = 40;
pub const XCB_XIM_QUERY_EXTENSION_REPLY: u32 = 41;
pub const XCB_XIM_SET_IM_VALUES: u32 = 42;
pub const XCB_XIM_SET_IM_VALUES_REPLY: u32 = 43;
pub const XCB_XIM_GET_IM_VALUES: u32 = 44;
pub const XCB_XIM_GET_IM_VALUES_REPLY: u32 = 45;
pub const XCB_XIM_CREATE_IC: u32 = 50;
pub const XCB_XIM_CREATE_IC_REPLY: u32 = 51;
pub const XCB_XIM_DESTROY_IC: u32 = 52;
pub const XCB_XIM_DESTROY_IC_REPLY: u32 = 53;
pub const XCB_XIM_SET_IC_VALUES: u32 = 54;
pub const XCB_XIM_SET_IC_VALUES_REPLY: u32 = 55;
pub const XCB_XIM_GET_IC_VALUES: u32 = 56;
pub const XCB_XIM_GET_IC_VALUES_REPLY: u32 = 57;
pub const XCB_XIM_SET_IC_FOCUS: u32 = 58;
pub const XCB_XIM_UNSET_IC_FOCUS: u32 = 59;
pub const XCB_XIM_FORWARD_EVENT: u32 = 60;
pub const XCB_XIM_SYNC: u32 = 61;
pub const XCB_XIM_SYNC_REPLY: u32 = 62;
pub const XCB_XIM_COMMIT: u32 = 63;
pub const XCB_XIM_RESET_IC: u32 = 64;
pub const XCB_XIM_RESET_IC_REPLY: u32 = 65;
pub const XCB_XIM_GEOMETRY: u32 = 70;
pub const XCB_XIM_STR_CONVERSION: u32 = 71;
pub const XCB_XIM_STR_CONVERSION_REPLY: u32 = 72;
pub const XCB_XIM_PREEDIT_START: u32 = 73;
pub const XCB_XIM_PREEDIT_START_REPLY: u32 = 74;
pub const XCB_XIM_PREEDIT_DRAW: u32 = 75;
pub const XCB_XIM_PREEDIT_CARET: u32 = 76;
pub const XCB_XIM_PREEDIT_CARET_REPLY: u32 = 77;
pub const XCB_XIM_PREEDIT_DONE: u32 = 78;
pub const XCB_XIM_STATUS_START: u32 = 79;
pub const XCB_XIM_STATUS_DRAW: u32 = 80;
pub const XCB_XIM_STATUS_DONE: u32 = 81;
pub const XCB_XIM_EXTENSION: u32 = 128;
pub const XCB_XIM_EXT_SET_EVENT_MASK: u32 = 48;
pub const XCB_XIM_EXT_FORWARD_KEYEVENT: u32 = 50;
pub const XCB_XIM_EXT_MOVE: u32 = 51;
pub const XCB_XIM_XNQueryInputStyle: &[u8; 16usize] = b"queryInputStyle\0";
pub const XCB_XIM_XNClientWindow: &[u8; 13usize] = b"clientWindow\0";
pub const XCB_XIM_XNInputStyle: &[u8; 11usize] = b"inputStyle\0";
pub const XCB_XIM_XNFocusWindow: &[u8; 12usize] = b"focusWindow\0";
pub const XCB_XIM_XNFilterEvents: &[u8; 13usize] = b"filterEvents\0";
pub const XCB_XIM_XNPreeditAttributes: &[u8; 18usize] = b"preeditAttributes\0";
pub const XCB_XIM_XNStatusAttributes: &[u8; 17usize] = b"statusAttributes\0";
pub const XCB_XIM_XNArea: &[u8; 5usize] = b"area\0";
pub const XCB_XIM_XNAreaNeeded: &[u8; 11usize] = b"areaNeeded\0";
pub const XCB_XIM_XNSpotLocation: &[u8; 13usize] = b"spotLocation\0";
pub const XCB_XIM_XNColormap: &[u8; 9usize] = b"colorMap\0";
pub const XCB_XIM_XNStdColormap: &[u8; 12usize] = b"stdColorMap\0";
pub const XCB_XIM_XNForeground: &[u8; 11usize] = b"foreground\0";
pub const XCB_XIM_XNBackground: &[u8; 11usize] = b"background\0";
pub const XCB_XIM_XNBackgroundPixmap: &[u8; 17usize] = b"backgroundPixmap\0";
pub const XCB_XIM_XNFontSet: &[u8; 8usize] = b"fontSet\0";
pub const XCB_XIM_XNLineSpace: &[u8; 10usize] = b"lineSpace\0";
pub const XCB_XIM_XNSeparatorofNestedList: &[u8; 22usize] = b"separatorofNestedList\0";
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __uint32_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn xcb_compound_text_init();
}
extern "C" {
    pub fn xcb_utf8_to_compound_text(
        utf8: *const ::std::os::raw::c_char,
        length: usize,
        lenghtOut: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xcb_compound_text_to_utf8(
        compound_text: *const ::std::os::raw::c_char,
        length: usize,
        lenghtOut: *mut usize,
    ) -> *mut ::std::os::raw::c_char;
}
pub type xcb_im_bytearray_t = *mut u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_ximattr_fr_t {
    pub attribute_ID: u16,
    pub type_of_the_value: u16,
    pub length_of_im_attribute: u16,
    pub im_attribute: xcb_im_bytearray_t,
}
pub type xcb_im_ximattr_fr_t = _xcb_im_ximattr_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_xicattr_fr_t {
    pub attribute_ID: u16,
    pub type_of_the_value: u16,
    pub length_of_ic_attribute: u16,
    pub ic_attribute: xcb_im_bytearray_t,
}
pub type xcb_im_xicattr_fr_t = _xcb_im_xicattr_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_ximattribute_fr_t {
    pub attribute_ID: u16,
    pub value_length: u16,
    pub value: xcb_im_bytearray_t,
}
pub type xcb_im_ximattribute_fr_t = _xcb_im_ximattribute_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_xicattribute_fr_t {
    pub attribute_ID: u16,
    pub value_length: u16,
    pub value: xcb_im_bytearray_t,
}
pub type xcb_im_xicattribute_fr_t = _xcb_im_xicattribute_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_ximtriggerkey_fr_t {
    pub keysym: u32,
    pub modifier: u32,
    pub modifier_mask: u32,
}
pub type xcb_im_ximtriggerkey_fr_t = _xcb_im_ximtriggerkey_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_encodinginfo_fr_t {
    pub length_of_encoding_info: u16,
    pub encoding_info: xcb_im_bytearray_t,
}
pub type xcb_im_encodinginfo_fr_t = _xcb_im_encodinginfo_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_str_fr_t {
    pub length_of_string: u8,
    pub string: xcb_im_bytearray_t,
}
pub type xcb_im_str_fr_t = _xcb_im_str_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_xpcs_fr_t {
    pub length_of_string_in_bytes: u16,
    pub string: xcb_im_bytearray_t,
}
pub type xcb_im_xpcs_fr_t = _xcb_im_xpcs_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_ext_fr_t {
    pub extension_major_opcode: u8,
    pub extension_minor_opcode: u8,
    pub length_of_extension_name: u16,
    pub extension_name: xcb_im_bytearray_t,
}
pub type xcb_im_ext_fr_t = _xcb_im_ext_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_inputstyle_fr_t {
    pub inputstyle: u32,
}
pub type xcb_im_inputstyle_fr_t = _xcb_im_inputstyle_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_attr_head_fr_t {
    pub attribute_id: u16,
    pub attribute_length: u16,
}
pub type xcb_im_attr_head_fr_t = _xcb_im_attr_head_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_short_fr_t {
    pub value: u16,
}
pub type xcb_im_short_fr_t = _xcb_im_short_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_long_fr_t {
    pub value: u32,
}
pub type xcb_im_long_fr_t = _xcb_im_long_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_xrectangle_fr_t {
    pub x: u16,
    pub y: u16,
    pub width: u16,
    pub height: u16,
}
pub type xcb_im_xrectangle_fr_t = _xcb_im_xrectangle_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_xpoint_fr_t {
    pub x: u16,
    pub y: u16,
}
pub type xcb_im_xpoint_fr_t = _xcb_im_xpoint_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_fontset_fr_t {
    pub length_of_base_font_name: u16,
    pub base_font_name_list: xcb_im_bytearray_t,
}
pub type xcb_im_fontset_fr_t = _xcb_im_fontset_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_input_styles_fr_t {
    pub XIMStyle_list: _xcb_im_input_styles_fr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_input_styles_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_inputstyle_fr_t,
}
pub type xcb_im_input_styles_fr_t = _xcb_im_input_styles_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_packet_header_fr_t {
    pub major_opcode: u8,
    pub minor_opcode: u8,
    pub length: u16,
}
pub type xcb_im_packet_header_fr_t = _xcb_im_packet_header_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_error_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub flag: u16,
    pub Error_Code: u16,
    pub length_of_error_detail: u16,
    pub type_of_error_detail: u16,
    pub error_detail: xcb_im_bytearray_t,
}
pub type xcb_im_error_fr_t = _xcb_im_error_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_connect_fr_t {
    pub byte_order: u8,
    pub client_major_protocol_version: u16,
    pub client_minor_protocol_version: u16,
    pub client_auth_protocol_names: _xcb_im_connect_fr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_connect_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_xpcs_fr_t,
}
pub type xcb_im_connect_fr_t = _xcb_im_connect_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_connect_reply_fr_t {
    pub server_major_protocol_version: u16,
    pub server_minor_protocol_version: u16,
}
pub type xcb_im_connect_reply_fr_t = _xcb_im_connect_reply_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_auth_required_fr_t {
    pub auth_protocol_index: u8,
    pub auth_data1: u8,
    pub auth_data2: xcb_im_bytearray_t,
}
pub type xcb_im_auth_required_fr_t = _xcb_im_auth_required_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_auth_reply_fr_t {
    pub field0: u8,
    pub field1: xcb_im_bytearray_t,
}
pub type xcb_im_auth_reply_fr_t = _xcb_im_auth_reply_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_auth_next_fr_t {
    pub auth_data1: u8,
    pub auth_data2: xcb_im_bytearray_t,
}
pub type xcb_im_auth_next_fr_t = _xcb_im_auth_next_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_auth_setup_fr_t {
    pub server_auth_protocol_names: _xcb_im_auth_setup_fr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_auth_setup_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_xpcs_fr_t,
}
pub type xcb_im_auth_setup_fr_t = _xcb_im_auth_setup_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_auth_ng_fr_t {}
pub type xcb_im_auth_ng_fr_t = _xcb_im_auth_ng_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_disconnect_fr_t {}
pub type xcb_im_disconnect_fr_t = _xcb_im_disconnect_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_disconnect_reply_fr_t {}
pub type xcb_im_disconnect_reply_fr_t = _xcb_im_disconnect_reply_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_open_fr_t {
    pub field0: xcb_im_str_fr_t,
}
pub type xcb_im_open_fr_t = _xcb_im_open_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_open_reply_fr_t {
    pub input_method_ID: u16,
    pub IM_attribute_supported: _xcb_im_open_reply_fr_t__bindgen_ty_1,
    pub IC_attribute_supported: _xcb_im_open_reply_fr_t__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_open_reply_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_ximattr_fr_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_open_reply_fr_t__bindgen_ty_2 {
    pub size: u32,
    pub items: *mut xcb_im_xicattr_fr_t,
}
pub type xcb_im_open_reply_fr_t = _xcb_im_open_reply_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_close_fr_t {
    pub input_method_ID: u16,
}
pub type xcb_im_close_fr_t = _xcb_im_close_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_close_reply_fr_t {
    pub input_method_ID: u16,
}
pub type xcb_im_close_reply_fr_t = _xcb_im_close_reply_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_register_triggerkeys_fr_t {
    pub input_method_ID: u16,
    pub on_keys_list: _xcb_im_register_triggerkeys_fr_t__bindgen_ty_1,
    pub off_keys_list: _xcb_im_register_triggerkeys_fr_t__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_register_triggerkeys_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_ximtriggerkey_fr_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_register_triggerkeys_fr_t__bindgen_ty_2 {
    pub size: u32,
    pub items: *mut xcb_im_ximtriggerkey_fr_t,
}
pub type xcb_im_register_triggerkeys_fr_t = _xcb_im_register_triggerkeys_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_trigger_notify_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub flag: u32,
    pub index_of_keys_list: u32,
    pub client_select_event_mask: u32,
}
pub type xcb_im_trigger_notify_fr_t = _xcb_im_trigger_notify_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_trigger_notify_reply_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
pub type xcb_im_trigger_notify_reply_fr_t = _xcb_im_trigger_notify_reply_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_set_event_mask_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub forward_event_mask: u32,
    pub synchronous_event_mask: u32,
}
pub type xcb_im_set_event_mask_fr_t = _xcb_im_set_event_mask_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_encoding_negotiation_fr_t {
    pub input_method_ID: u16,
    pub supported_list_of_encoding_in_IM_library: _xcb_im_encoding_negotiation_fr_t__bindgen_ty_1,
    pub list_of_encodings_supported_in_th: _xcb_im_encoding_negotiation_fr_t__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_encoding_negotiation_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_str_fr_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_encoding_negotiation_fr_t__bindgen_ty_2 {
    pub size: u32,
    pub items: *mut xcb_im_encodinginfo_fr_t,
}
pub type xcb_im_encoding_negotiation_fr_t = _xcb_im_encoding_negotiation_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_encoding_negotiation_reply_fr_t {
    pub input_method_ID: u16,
    pub category_of_the_encoding_determined: u16,
    pub index_of_the_encoding_determined: u16,
}
pub type xcb_im_encoding_negotiation_reply_fr_t = _xcb_im_encoding_negotiation_reply_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_query_extension_fr_t {
    pub input_method_ID: u16,
    pub extensions_supported_by_the_IM_library: _xcb_im_query_extension_fr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_query_extension_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_str_fr_t,
}
pub type xcb_im_query_extension_fr_t = _xcb_im_query_extension_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_query_extension_reply_fr_t {
    pub input_method_ID: u16,
    pub list_of_extensions_supported_by_th: _xcb_im_query_extension_reply_fr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_query_extension_reply_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_ext_fr_t,
}
pub type xcb_im_query_extension_reply_fr_t = _xcb_im_query_extension_reply_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_get_im_values_fr_t {
    pub input_method_ID: u16,
    pub im_attribute_id: _xcb_im_get_im_values_fr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_get_im_values_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut u16,
}
pub type xcb_im_get_im_values_fr_t = _xcb_im_get_im_values_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_get_im_values_reply_fr_t {
    pub input_method_ID: u16,
    pub im_attribute_returned: _xcb_im_get_im_values_reply_fr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_get_im_values_reply_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_ximattribute_fr_t,
}
pub type xcb_im_get_im_values_reply_fr_t = _xcb_im_get_im_values_reply_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_create_ic_fr_t {
    pub input_method_ID: u16,
    pub ic_attributes: _xcb_im_create_ic_fr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_create_ic_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_xicattribute_fr_t,
}
pub type xcb_im_create_ic_fr_t = _xcb_im_create_ic_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_create_ic_reply_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
pub type xcb_im_create_ic_reply_fr_t = _xcb_im_create_ic_reply_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_destroy_ic_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
pub type xcb_im_destroy_ic_fr_t = _xcb_im_destroy_ic_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_destroy_ic_reply_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
pub type xcb_im_destroy_ic_reply_fr_t = _xcb_im_destroy_ic_reply_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_set_ic_values_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub ic_attribute: _xcb_im_set_ic_values_fr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_set_ic_values_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_xicattribute_fr_t,
}
pub type xcb_im_set_ic_values_fr_t = _xcb_im_set_ic_values_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_set_ic_values_reply_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
pub type xcb_im_set_ic_values_reply_fr_t = _xcb_im_set_ic_values_reply_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_get_ic_values_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub ic_attribute: _xcb_im_get_ic_values_fr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_get_ic_values_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut u16,
}
pub type xcb_im_get_ic_values_fr_t = _xcb_im_get_ic_values_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_get_ic_values_reply_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub ic_attribute: _xcb_im_get_ic_values_reply_fr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_get_ic_values_reply_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut xcb_im_xicattribute_fr_t,
}
pub type xcb_im_get_ic_values_reply_fr_t = _xcb_im_get_ic_values_reply_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_set_ic_focus_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
pub type xcb_im_set_ic_focus_fr_t = _xcb_im_set_ic_focus_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_unset_ic_focus_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
pub type xcb_im_unset_ic_focus_fr_t = _xcb_im_unset_ic_focus_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_forward_event_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub flag: u16,
    pub sequence_number: u16,
}
pub type xcb_im_forward_event_fr_t = _xcb_im_forward_event_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_sync_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
pub type xcb_im_sync_fr_t = _xcb_im_sync_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_sync_reply_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
pub type xcb_im_sync_reply_fr_t = _xcb_im_sync_reply_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_commit_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub flag: u16,
    pub byte_length_of_committed_string: u16,
    pub committed_string: xcb_im_bytearray_t,
    pub keysym: _xcb_im_commit_fr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_commit_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut u32,
}
pub type xcb_im_commit_fr_t = _xcb_im_commit_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_commit_chars_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub flag: u16,
    pub byte_length_of_committed_string: u16,
    pub committed_string: xcb_im_bytearray_t,
}
pub type xcb_im_commit_chars_fr_t = _xcb_im_commit_chars_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_commit_both_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub flag: u16,
    pub keysym: u32,
    pub byte_length_of_committed_string: u16,
    pub committed_string: xcb_im_bytearray_t,
}
pub type xcb_im_commit_both_fr_t = _xcb_im_commit_both_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_reset_ic_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
pub type xcb_im_reset_ic_fr_t = _xcb_im_reset_ic_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_reset_ic_reply_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub byte_length_of_committed_string: u16,
    pub committed_string: xcb_im_bytearray_t,
}
pub type xcb_im_reset_ic_reply_fr_t = _xcb_im_reset_ic_reply_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_geometry_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
pub type xcb_im_geometry_fr_t = _xcb_im_geometry_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_str_conversion_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub XIMStringConversionPosition: u32,
    pub XIMStringConversionType: u32,
    pub XIMStringConversionOperation: u32,
    pub length_to_multiply_th: u16,
    pub length_of_the_string_to_b: u16,
    pub string: xcb_im_bytearray_t,
}
pub type xcb_im_str_conversion_fr_t = _xcb_im_str_conversion_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_str_conversion_reply_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub XIMStringConversionFeedback: u32,
    pub length_of_the_retrieved_string: u16,
    pub retrieved_string: xcb_im_bytearray_t,
    pub feedback_array: _xcb_im_str_conversion_reply_fr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_str_conversion_reply_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut u32,
}
pub type xcb_im_str_conversion_reply_fr_t = _xcb_im_str_conversion_reply_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_preedit_start_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
pub type xcb_im_preedit_start_fr_t = _xcb_im_preedit_start_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_preedit_start_reply_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub return_value: u32,
}
pub type xcb_im_preedit_start_reply_fr_t = _xcb_im_preedit_start_reply_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_preedit_draw_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub caret: u32,
    pub chg_first: u32,
    pub chg_length: u32,
    pub status: u32,
    pub length_of_preedit_string: u16,
    pub preedit_string: xcb_im_bytearray_t,
    pub feedback_array: _xcb_im_preedit_draw_fr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_preedit_draw_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut u32,
}
pub type xcb_im_preedit_draw_fr_t = _xcb_im_preedit_draw_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_preedit_caret_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub position: u32,
    pub direction: u32,
    pub style: u32,
}
pub type xcb_im_preedit_caret_fr_t = _xcb_im_preedit_caret_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_preedit_caret_reply_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub position: u32,
}
pub type xcb_im_preedit_caret_reply_fr_t = _xcb_im_preedit_caret_reply_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_preedit_done_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
pub type xcb_im_preedit_done_fr_t = _xcb_im_preedit_done_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_status_start_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
pub type xcb_im_status_start_fr_t = _xcb_im_status_start_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_status_draw_text_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub type_: u32,
    pub status: u32,
    pub length_of_status_string: u16,
    pub status_string: xcb_im_bytearray_t,
    pub feedback_array: _xcb_im_status_draw_text_fr_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_status_draw_text_fr_t__bindgen_ty_1 {
    pub size: u32,
    pub items: *mut u32,
}
pub type xcb_im_status_draw_text_fr_t = _xcb_im_status_draw_text_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_status_draw_bitmap_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub type_: u32,
    pub pixmap_data: u32,
}
pub type xcb_im_status_draw_bitmap_fr_t = _xcb_im_status_draw_bitmap_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_status_done_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
}
pub type xcb_im_status_done_fr_t = _xcb_im_status_done_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_ext_set_event_mask_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub filter_event_mask: u32,
    pub intercept_event_mask: u32,
    pub select_event_mask: u32,
    pub forward_event_mask: u32,
    pub synchronous_event_mask: u32,
}
pub type xcb_im_ext_set_event_mask_fr_t = _xcb_im_ext_set_event_mask_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_ext_forward_keyevent_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub flag: u16,
    pub sequence_number: u16,
    pub xEvent_u_u_type: u8,
    pub keycode: u8,
    pub state: u16,
    pub time: u32,
    pub window: u32,
}
pub type xcb_im_ext_forward_keyevent_fr_t = _xcb_im_ext_forward_keyevent_fr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_ext_move_fr_t {
    pub input_method_ID: u16,
    pub input_context_ID: u16,
    pub X: u16,
    pub Y: u16,
}
pub type xcb_im_ext_move_fr_t = _xcb_im_ext_move_fr_t;
extern "C" {
    pub fn xcb_im_ximattr_fr_read(
        frame: *mut xcb_im_ximattr_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_ximattr_fr_write(
        frame: *mut xcb_im_ximattr_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_ximattr_fr_free(frame: *mut xcb_im_ximattr_fr_t);
}
extern "C" {
    pub fn xcb_im_ximattr_fr_size(frame: *mut xcb_im_ximattr_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_xicattr_fr_read(
        frame: *mut xcb_im_xicattr_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_xicattr_fr_write(
        frame: *mut xcb_im_xicattr_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_xicattr_fr_free(frame: *mut xcb_im_xicattr_fr_t);
}
extern "C" {
    pub fn xcb_im_xicattr_fr_size(frame: *mut xcb_im_xicattr_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_ximattribute_fr_read(
        frame: *mut xcb_im_ximattribute_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_ximattribute_fr_write(
        frame: *mut xcb_im_ximattribute_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_ximattribute_fr_free(frame: *mut xcb_im_ximattribute_fr_t);
}
extern "C" {
    pub fn xcb_im_ximattribute_fr_size(frame: *mut xcb_im_ximattribute_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_xicattribute_fr_read(
        frame: *mut xcb_im_xicattribute_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_xicattribute_fr_write(
        frame: *mut xcb_im_xicattribute_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_xicattribute_fr_free(frame: *mut xcb_im_xicattribute_fr_t);
}
extern "C" {
    pub fn xcb_im_xicattribute_fr_size(frame: *mut xcb_im_xicattribute_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_ximtriggerkey_fr_read(
        frame: *mut xcb_im_ximtriggerkey_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_ximtriggerkey_fr_write(
        frame: *mut xcb_im_ximtriggerkey_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_ximtriggerkey_fr_free(frame: *mut xcb_im_ximtriggerkey_fr_t);
}
extern "C" {
    pub fn xcb_im_encodinginfo_fr_read(
        frame: *mut xcb_im_encodinginfo_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_encodinginfo_fr_write(
        frame: *mut xcb_im_encodinginfo_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_encodinginfo_fr_free(frame: *mut xcb_im_encodinginfo_fr_t);
}
extern "C" {
    pub fn xcb_im_encodinginfo_fr_size(frame: *mut xcb_im_encodinginfo_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_str_fr_read(
        frame: *mut xcb_im_str_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_str_fr_write(frame: *mut xcb_im_str_fr_t, data: *mut u8, swap: bool) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_str_fr_free(frame: *mut xcb_im_str_fr_t);
}
extern "C" {
    pub fn xcb_im_str_fr_size(frame: *mut xcb_im_str_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_xpcs_fr_read(
        frame: *mut xcb_im_xpcs_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_xpcs_fr_write(frame: *mut xcb_im_xpcs_fr_t, data: *mut u8, swap: bool)
        -> *mut u8;
}
extern "C" {
    pub fn xcb_im_xpcs_fr_free(frame: *mut xcb_im_xpcs_fr_t);
}
extern "C" {
    pub fn xcb_im_xpcs_fr_size(frame: *mut xcb_im_xpcs_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_ext_fr_read(
        frame: *mut xcb_im_ext_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_ext_fr_write(frame: *mut xcb_im_ext_fr_t, data: *mut u8, swap: bool) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_ext_fr_free(frame: *mut xcb_im_ext_fr_t);
}
extern "C" {
    pub fn xcb_im_ext_fr_size(frame: *mut xcb_im_ext_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_inputstyle_fr_read(
        frame: *mut xcb_im_inputstyle_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_inputstyle_fr_write(
        frame: *mut xcb_im_inputstyle_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_inputstyle_fr_free(frame: *mut xcb_im_inputstyle_fr_t);
}
extern "C" {
    pub fn xcb_im_attr_head_fr_read(
        frame: *mut xcb_im_attr_head_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_attr_head_fr_write(
        frame: *mut xcb_im_attr_head_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_attr_head_fr_free(frame: *mut xcb_im_attr_head_fr_t);
}
extern "C" {
    pub fn xcb_im_short_fr_read(
        frame: *mut xcb_im_short_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_short_fr_write(
        frame: *mut xcb_im_short_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_short_fr_free(frame: *mut xcb_im_short_fr_t);
}
extern "C" {
    pub fn xcb_im_long_fr_read(
        frame: *mut xcb_im_long_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_long_fr_write(frame: *mut xcb_im_long_fr_t, data: *mut u8, swap: bool)
        -> *mut u8;
}
extern "C" {
    pub fn xcb_im_long_fr_free(frame: *mut xcb_im_long_fr_t);
}
extern "C" {
    pub fn xcb_im_xrectangle_fr_read(
        frame: *mut xcb_im_xrectangle_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_xrectangle_fr_write(
        frame: *mut xcb_im_xrectangle_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_xrectangle_fr_free(frame: *mut xcb_im_xrectangle_fr_t);
}
extern "C" {
    pub fn xcb_im_xpoint_fr_read(
        frame: *mut xcb_im_xpoint_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_xpoint_fr_write(
        frame: *mut xcb_im_xpoint_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_xpoint_fr_free(frame: *mut xcb_im_xpoint_fr_t);
}
extern "C" {
    pub fn xcb_im_fontset_fr_read(
        frame: *mut xcb_im_fontset_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_fontset_fr_write(
        frame: *mut xcb_im_fontset_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_fontset_fr_free(frame: *mut xcb_im_fontset_fr_t);
}
extern "C" {
    pub fn xcb_im_fontset_fr_size(frame: *mut xcb_im_fontset_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_input_styles_fr_read(
        frame: *mut xcb_im_input_styles_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_input_styles_fr_write(
        frame: *mut xcb_im_input_styles_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_input_styles_fr_free(frame: *mut xcb_im_input_styles_fr_t);
}
extern "C" {
    pub fn xcb_im_input_styles_fr_size(frame: *mut xcb_im_input_styles_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_packet_header_fr_read(
        frame: *mut xcb_im_packet_header_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_packet_header_fr_write(
        frame: *mut xcb_im_packet_header_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_packet_header_fr_free(frame: *mut xcb_im_packet_header_fr_t);
}
extern "C" {
    pub fn xcb_im_error_fr_read(
        frame: *mut xcb_im_error_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_error_fr_write(
        frame: *mut xcb_im_error_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_error_fr_free(frame: *mut xcb_im_error_fr_t);
}
extern "C" {
    pub fn xcb_im_error_fr_size(frame: *mut xcb_im_error_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_connect_fr_read(
        frame: *mut xcb_im_connect_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_connect_fr_write(
        frame: *mut xcb_im_connect_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_connect_fr_free(frame: *mut xcb_im_connect_fr_t);
}
extern "C" {
    pub fn xcb_im_connect_fr_size(frame: *mut xcb_im_connect_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_connect_reply_fr_read(
        frame: *mut xcb_im_connect_reply_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_connect_reply_fr_write(
        frame: *mut xcb_im_connect_reply_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_connect_reply_fr_free(frame: *mut xcb_im_connect_reply_fr_t);
}
extern "C" {
    pub fn xcb_im_auth_required_fr_read(
        frame: *mut xcb_im_auth_required_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_auth_required_fr_write(
        frame: *mut xcb_im_auth_required_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_auth_required_fr_free(frame: *mut xcb_im_auth_required_fr_t);
}
extern "C" {
    pub fn xcb_im_auth_required_fr_size(frame: *mut xcb_im_auth_required_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_auth_reply_fr_read(
        frame: *mut xcb_im_auth_reply_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_auth_reply_fr_write(
        frame: *mut xcb_im_auth_reply_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_auth_reply_fr_free(frame: *mut xcb_im_auth_reply_fr_t);
}
extern "C" {
    pub fn xcb_im_auth_reply_fr_size(frame: *mut xcb_im_auth_reply_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_auth_next_fr_read(
        frame: *mut xcb_im_auth_next_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_auth_next_fr_write(
        frame: *mut xcb_im_auth_next_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_auth_next_fr_free(frame: *mut xcb_im_auth_next_fr_t);
}
extern "C" {
    pub fn xcb_im_auth_next_fr_size(frame: *mut xcb_im_auth_next_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_auth_setup_fr_read(
        frame: *mut xcb_im_auth_setup_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_auth_setup_fr_write(
        frame: *mut xcb_im_auth_setup_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_auth_setup_fr_free(frame: *mut xcb_im_auth_setup_fr_t);
}
extern "C" {
    pub fn xcb_im_auth_setup_fr_size(frame: *mut xcb_im_auth_setup_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_auth_ng_fr_read(
        frame: *mut xcb_im_auth_ng_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_auth_ng_fr_write(
        frame: *mut xcb_im_auth_ng_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_auth_ng_fr_free(frame: *mut xcb_im_auth_ng_fr_t);
}
extern "C" {
    pub fn xcb_im_disconnect_fr_read(
        frame: *mut xcb_im_disconnect_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_disconnect_fr_write(
        frame: *mut xcb_im_disconnect_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_disconnect_fr_free(frame: *mut xcb_im_disconnect_fr_t);
}
extern "C" {
    pub fn xcb_im_disconnect_reply_fr_read(
        frame: *mut xcb_im_disconnect_reply_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_disconnect_reply_fr_write(
        frame: *mut xcb_im_disconnect_reply_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_disconnect_reply_fr_free(frame: *mut xcb_im_disconnect_reply_fr_t);
}
extern "C" {
    pub fn xcb_im_open_fr_read(
        frame: *mut xcb_im_open_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_open_fr_write(frame: *mut xcb_im_open_fr_t, data: *mut u8, swap: bool)
        -> *mut u8;
}
extern "C" {
    pub fn xcb_im_open_fr_free(frame: *mut xcb_im_open_fr_t);
}
extern "C" {
    pub fn xcb_im_open_fr_size(frame: *mut xcb_im_open_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_open_reply_fr_read(
        frame: *mut xcb_im_open_reply_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_open_reply_fr_write(
        frame: *mut xcb_im_open_reply_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_open_reply_fr_free(frame: *mut xcb_im_open_reply_fr_t);
}
extern "C" {
    pub fn xcb_im_open_reply_fr_size(frame: *mut xcb_im_open_reply_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_close_fr_read(
        frame: *mut xcb_im_close_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_close_fr_write(
        frame: *mut xcb_im_close_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_close_fr_free(frame: *mut xcb_im_close_fr_t);
}
extern "C" {
    pub fn xcb_im_close_reply_fr_read(
        frame: *mut xcb_im_close_reply_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_close_reply_fr_write(
        frame: *mut xcb_im_close_reply_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_close_reply_fr_free(frame: *mut xcb_im_close_reply_fr_t);
}
extern "C" {
    pub fn xcb_im_register_triggerkeys_fr_read(
        frame: *mut xcb_im_register_triggerkeys_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_register_triggerkeys_fr_write(
        frame: *mut xcb_im_register_triggerkeys_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_register_triggerkeys_fr_free(frame: *mut xcb_im_register_triggerkeys_fr_t);
}
extern "C" {
    pub fn xcb_im_register_triggerkeys_fr_size(
        frame: *mut xcb_im_register_triggerkeys_fr_t,
    ) -> usize;
}
extern "C" {
    pub fn xcb_im_trigger_notify_fr_read(
        frame: *mut xcb_im_trigger_notify_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_trigger_notify_fr_write(
        frame: *mut xcb_im_trigger_notify_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_trigger_notify_fr_free(frame: *mut xcb_im_trigger_notify_fr_t);
}
extern "C" {
    pub fn xcb_im_trigger_notify_reply_fr_read(
        frame: *mut xcb_im_trigger_notify_reply_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_trigger_notify_reply_fr_write(
        frame: *mut xcb_im_trigger_notify_reply_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_trigger_notify_reply_fr_free(frame: *mut xcb_im_trigger_notify_reply_fr_t);
}
extern "C" {
    pub fn xcb_im_set_event_mask_fr_read(
        frame: *mut xcb_im_set_event_mask_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_set_event_mask_fr_write(
        frame: *mut xcb_im_set_event_mask_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_set_event_mask_fr_free(frame: *mut xcb_im_set_event_mask_fr_t);
}
extern "C" {
    pub fn xcb_im_encoding_negotiation_fr_read(
        frame: *mut xcb_im_encoding_negotiation_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_encoding_negotiation_fr_write(
        frame: *mut xcb_im_encoding_negotiation_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_encoding_negotiation_fr_free(frame: *mut xcb_im_encoding_negotiation_fr_t);
}
extern "C" {
    pub fn xcb_im_encoding_negotiation_fr_size(
        frame: *mut xcb_im_encoding_negotiation_fr_t,
    ) -> usize;
}
extern "C" {
    pub fn xcb_im_encoding_negotiation_reply_fr_read(
        frame: *mut xcb_im_encoding_negotiation_reply_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_encoding_negotiation_reply_fr_write(
        frame: *mut xcb_im_encoding_negotiation_reply_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_encoding_negotiation_reply_fr_free(
        frame: *mut xcb_im_encoding_negotiation_reply_fr_t,
    );
}
extern "C" {
    pub fn xcb_im_query_extension_fr_read(
        frame: *mut xcb_im_query_extension_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_query_extension_fr_write(
        frame: *mut xcb_im_query_extension_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_query_extension_fr_free(frame: *mut xcb_im_query_extension_fr_t);
}
extern "C" {
    pub fn xcb_im_query_extension_fr_size(frame: *mut xcb_im_query_extension_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_query_extension_reply_fr_read(
        frame: *mut xcb_im_query_extension_reply_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_query_extension_reply_fr_write(
        frame: *mut xcb_im_query_extension_reply_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_query_extension_reply_fr_free(frame: *mut xcb_im_query_extension_reply_fr_t);
}
extern "C" {
    pub fn xcb_im_query_extension_reply_fr_size(
        frame: *mut xcb_im_query_extension_reply_fr_t,
    ) -> usize;
}
extern "C" {
    pub fn xcb_im_get_im_values_fr_read(
        frame: *mut xcb_im_get_im_values_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_get_im_values_fr_write(
        frame: *mut xcb_im_get_im_values_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_get_im_values_fr_free(frame: *mut xcb_im_get_im_values_fr_t);
}
extern "C" {
    pub fn xcb_im_get_im_values_fr_size(frame: *mut xcb_im_get_im_values_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_get_im_values_reply_fr_read(
        frame: *mut xcb_im_get_im_values_reply_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_get_im_values_reply_fr_write(
        frame: *mut xcb_im_get_im_values_reply_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_get_im_values_reply_fr_free(frame: *mut xcb_im_get_im_values_reply_fr_t);
}
extern "C" {
    pub fn xcb_im_get_im_values_reply_fr_size(frame: *mut xcb_im_get_im_values_reply_fr_t)
        -> usize;
}
extern "C" {
    pub fn xcb_im_create_ic_fr_read(
        frame: *mut xcb_im_create_ic_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_create_ic_fr_write(
        frame: *mut xcb_im_create_ic_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_create_ic_fr_free(frame: *mut xcb_im_create_ic_fr_t);
}
extern "C" {
    pub fn xcb_im_create_ic_fr_size(frame: *mut xcb_im_create_ic_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_create_ic_reply_fr_read(
        frame: *mut xcb_im_create_ic_reply_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_create_ic_reply_fr_write(
        frame: *mut xcb_im_create_ic_reply_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_create_ic_reply_fr_free(frame: *mut xcb_im_create_ic_reply_fr_t);
}
extern "C" {
    pub fn xcb_im_destroy_ic_fr_read(
        frame: *mut xcb_im_destroy_ic_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_destroy_ic_fr_write(
        frame: *mut xcb_im_destroy_ic_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_destroy_ic_fr_free(frame: *mut xcb_im_destroy_ic_fr_t);
}
extern "C" {
    pub fn xcb_im_destroy_ic_reply_fr_read(
        frame: *mut xcb_im_destroy_ic_reply_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_destroy_ic_reply_fr_write(
        frame: *mut xcb_im_destroy_ic_reply_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_destroy_ic_reply_fr_free(frame: *mut xcb_im_destroy_ic_reply_fr_t);
}
extern "C" {
    pub fn xcb_im_set_ic_values_fr_read(
        frame: *mut xcb_im_set_ic_values_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_set_ic_values_fr_write(
        frame: *mut xcb_im_set_ic_values_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_set_ic_values_fr_free(frame: *mut xcb_im_set_ic_values_fr_t);
}
extern "C" {
    pub fn xcb_im_set_ic_values_fr_size(frame: *mut xcb_im_set_ic_values_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_set_ic_values_reply_fr_read(
        frame: *mut xcb_im_set_ic_values_reply_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_set_ic_values_reply_fr_write(
        frame: *mut xcb_im_set_ic_values_reply_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_set_ic_values_reply_fr_free(frame: *mut xcb_im_set_ic_values_reply_fr_t);
}
extern "C" {
    pub fn xcb_im_get_ic_values_fr_read(
        frame: *mut xcb_im_get_ic_values_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_get_ic_values_fr_write(
        frame: *mut xcb_im_get_ic_values_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_get_ic_values_fr_free(frame: *mut xcb_im_get_ic_values_fr_t);
}
extern "C" {
    pub fn xcb_im_get_ic_values_fr_size(frame: *mut xcb_im_get_ic_values_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_get_ic_values_reply_fr_read(
        frame: *mut xcb_im_get_ic_values_reply_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_get_ic_values_reply_fr_write(
        frame: *mut xcb_im_get_ic_values_reply_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_get_ic_values_reply_fr_free(frame: *mut xcb_im_get_ic_values_reply_fr_t);
}
extern "C" {
    pub fn xcb_im_get_ic_values_reply_fr_size(frame: *mut xcb_im_get_ic_values_reply_fr_t)
        -> usize;
}
extern "C" {
    pub fn xcb_im_set_ic_focus_fr_read(
        frame: *mut xcb_im_set_ic_focus_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_set_ic_focus_fr_write(
        frame: *mut xcb_im_set_ic_focus_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_set_ic_focus_fr_free(frame: *mut xcb_im_set_ic_focus_fr_t);
}
extern "C" {
    pub fn xcb_im_unset_ic_focus_fr_read(
        frame: *mut xcb_im_unset_ic_focus_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_unset_ic_focus_fr_write(
        frame: *mut xcb_im_unset_ic_focus_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_unset_ic_focus_fr_free(frame: *mut xcb_im_unset_ic_focus_fr_t);
}
extern "C" {
    pub fn xcb_im_forward_event_fr_read(
        frame: *mut xcb_im_forward_event_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_forward_event_fr_write(
        frame: *mut xcb_im_forward_event_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_forward_event_fr_free(frame: *mut xcb_im_forward_event_fr_t);
}
extern "C" {
    pub fn xcb_im_sync_fr_read(
        frame: *mut xcb_im_sync_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_sync_fr_write(frame: *mut xcb_im_sync_fr_t, data: *mut u8, swap: bool)
        -> *mut u8;
}
extern "C" {
    pub fn xcb_im_sync_fr_free(frame: *mut xcb_im_sync_fr_t);
}
extern "C" {
    pub fn xcb_im_sync_reply_fr_read(
        frame: *mut xcb_im_sync_reply_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_sync_reply_fr_write(
        frame: *mut xcb_im_sync_reply_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_sync_reply_fr_free(frame: *mut xcb_im_sync_reply_fr_t);
}
extern "C" {
    pub fn xcb_im_commit_fr_read(
        frame: *mut xcb_im_commit_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_commit_fr_write(
        frame: *mut xcb_im_commit_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_commit_fr_free(frame: *mut xcb_im_commit_fr_t);
}
extern "C" {
    pub fn xcb_im_commit_fr_size(frame: *mut xcb_im_commit_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_commit_chars_fr_read(
        frame: *mut xcb_im_commit_chars_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_commit_chars_fr_write(
        frame: *mut xcb_im_commit_chars_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_commit_chars_fr_free(frame: *mut xcb_im_commit_chars_fr_t);
}
extern "C" {
    pub fn xcb_im_commit_chars_fr_size(frame: *mut xcb_im_commit_chars_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_commit_both_fr_read(
        frame: *mut xcb_im_commit_both_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_commit_both_fr_write(
        frame: *mut xcb_im_commit_both_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_commit_both_fr_free(frame: *mut xcb_im_commit_both_fr_t);
}
extern "C" {
    pub fn xcb_im_commit_both_fr_size(frame: *mut xcb_im_commit_both_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_reset_ic_fr_read(
        frame: *mut xcb_im_reset_ic_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_reset_ic_fr_write(
        frame: *mut xcb_im_reset_ic_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_reset_ic_fr_free(frame: *mut xcb_im_reset_ic_fr_t);
}
extern "C" {
    pub fn xcb_im_reset_ic_reply_fr_read(
        frame: *mut xcb_im_reset_ic_reply_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_reset_ic_reply_fr_write(
        frame: *mut xcb_im_reset_ic_reply_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_reset_ic_reply_fr_free(frame: *mut xcb_im_reset_ic_reply_fr_t);
}
extern "C" {
    pub fn xcb_im_reset_ic_reply_fr_size(frame: *mut xcb_im_reset_ic_reply_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_geometry_fr_read(
        frame: *mut xcb_im_geometry_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_geometry_fr_write(
        frame: *mut xcb_im_geometry_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_geometry_fr_free(frame: *mut xcb_im_geometry_fr_t);
}
extern "C" {
    pub fn xcb_im_str_conversion_fr_read(
        frame: *mut xcb_im_str_conversion_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_str_conversion_fr_write(
        frame: *mut xcb_im_str_conversion_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_str_conversion_fr_free(frame: *mut xcb_im_str_conversion_fr_t);
}
extern "C" {
    pub fn xcb_im_str_conversion_fr_size(frame: *mut xcb_im_str_conversion_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_str_conversion_reply_fr_read(
        frame: *mut xcb_im_str_conversion_reply_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_str_conversion_reply_fr_write(
        frame: *mut xcb_im_str_conversion_reply_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_str_conversion_reply_fr_free(frame: *mut xcb_im_str_conversion_reply_fr_t);
}
extern "C" {
    pub fn xcb_im_str_conversion_reply_fr_size(
        frame: *mut xcb_im_str_conversion_reply_fr_t,
    ) -> usize;
}
extern "C" {
    pub fn xcb_im_preedit_start_fr_read(
        frame: *mut xcb_im_preedit_start_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_preedit_start_fr_write(
        frame: *mut xcb_im_preedit_start_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_preedit_start_fr_free(frame: *mut xcb_im_preedit_start_fr_t);
}
extern "C" {
    pub fn xcb_im_preedit_start_reply_fr_read(
        frame: *mut xcb_im_preedit_start_reply_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_preedit_start_reply_fr_write(
        frame: *mut xcb_im_preedit_start_reply_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_preedit_start_reply_fr_free(frame: *mut xcb_im_preedit_start_reply_fr_t);
}
extern "C" {
    pub fn xcb_im_preedit_draw_fr_read(
        frame: *mut xcb_im_preedit_draw_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_preedit_draw_fr_write(
        frame: *mut xcb_im_preedit_draw_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_preedit_draw_fr_free(frame: *mut xcb_im_preedit_draw_fr_t);
}
extern "C" {
    pub fn xcb_im_preedit_draw_fr_size(frame: *mut xcb_im_preedit_draw_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_preedit_caret_fr_read(
        frame: *mut xcb_im_preedit_caret_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_preedit_caret_fr_write(
        frame: *mut xcb_im_preedit_caret_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_preedit_caret_fr_free(frame: *mut xcb_im_preedit_caret_fr_t);
}
extern "C" {
    pub fn xcb_im_preedit_caret_reply_fr_read(
        frame: *mut xcb_im_preedit_caret_reply_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_preedit_caret_reply_fr_write(
        frame: *mut xcb_im_preedit_caret_reply_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_preedit_caret_reply_fr_free(frame: *mut xcb_im_preedit_caret_reply_fr_t);
}
extern "C" {
    pub fn xcb_im_preedit_done_fr_read(
        frame: *mut xcb_im_preedit_done_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_preedit_done_fr_write(
        frame: *mut xcb_im_preedit_done_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_preedit_done_fr_free(frame: *mut xcb_im_preedit_done_fr_t);
}
extern "C" {
    pub fn xcb_im_status_start_fr_read(
        frame: *mut xcb_im_status_start_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_status_start_fr_write(
        frame: *mut xcb_im_status_start_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_status_start_fr_free(frame: *mut xcb_im_status_start_fr_t);
}
extern "C" {
    pub fn xcb_im_status_draw_text_fr_read(
        frame: *mut xcb_im_status_draw_text_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_status_draw_text_fr_write(
        frame: *mut xcb_im_status_draw_text_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_status_draw_text_fr_free(frame: *mut xcb_im_status_draw_text_fr_t);
}
extern "C" {
    pub fn xcb_im_status_draw_text_fr_size(frame: *mut xcb_im_status_draw_text_fr_t) -> usize;
}
extern "C" {
    pub fn xcb_im_status_draw_bitmap_fr_read(
        frame: *mut xcb_im_status_draw_bitmap_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_status_draw_bitmap_fr_write(
        frame: *mut xcb_im_status_draw_bitmap_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_status_draw_bitmap_fr_free(frame: *mut xcb_im_status_draw_bitmap_fr_t);
}
extern "C" {
    pub fn xcb_im_status_done_fr_read(
        frame: *mut xcb_im_status_done_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_status_done_fr_write(
        frame: *mut xcb_im_status_done_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_status_done_fr_free(frame: *mut xcb_im_status_done_fr_t);
}
extern "C" {
    pub fn xcb_im_ext_set_event_mask_fr_read(
        frame: *mut xcb_im_ext_set_event_mask_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_ext_set_event_mask_fr_write(
        frame: *mut xcb_im_ext_set_event_mask_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_ext_set_event_mask_fr_free(frame: *mut xcb_im_ext_set_event_mask_fr_t);
}
extern "C" {
    pub fn xcb_im_ext_forward_keyevent_fr_read(
        frame: *mut xcb_im_ext_forward_keyevent_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_ext_forward_keyevent_fr_write(
        frame: *mut xcb_im_ext_forward_keyevent_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_ext_forward_keyevent_fr_free(frame: *mut xcb_im_ext_forward_keyevent_fr_t);
}
extern "C" {
    pub fn xcb_im_ext_move_fr_read(
        frame: *mut xcb_im_ext_move_fr_t,
        data: *mut *mut u8,
        len: *mut usize,
        swap: bool,
    );
}
extern "C" {
    pub fn xcb_im_ext_move_fr_write(
        frame: *mut xcb_im_ext_move_fr_t,
        data: *mut u8,
        swap: bool,
    ) -> *mut u8;
}
extern "C" {
    pub fn xcb_im_ext_move_fr_free(frame: *mut xcb_im_ext_move_fr_t);
}
pub const _xcb_im_style_t_XCB_IM_PreeditArea: _xcb_im_style_t = 1;
pub const _xcb_im_style_t_XCB_IM_PreeditCallbacks: _xcb_im_style_t = 2;
pub const _xcb_im_style_t_XCB_IM_PreeditPosition: _xcb_im_style_t = 4;
pub const _xcb_im_style_t_XCB_IM_PreeditNothing: _xcb_im_style_t = 8;
pub const _xcb_im_style_t_XCB_IM_PreeditNone: _xcb_im_style_t = 16;
pub const _xcb_im_style_t_XCB_IM_StatusArea: _xcb_im_style_t = 256;
pub const _xcb_im_style_t_XCB_IM_StatusCallbacks: _xcb_im_style_t = 512;
pub const _xcb_im_style_t_XCB_IM_StatusNothing: _xcb_im_style_t = 1024;
pub const _xcb_im_style_t_XCB_IM_StatusNone: _xcb_im_style_t = 2048;
pub type _xcb_im_style_t = ::std::os::raw::c_uint;
pub const xcb_im_feedback_t_XCB_XIM_REVERSE: xcb_im_feedback_t = 1;
pub const xcb_im_feedback_t_XCB_XIM_UNDERLINE: xcb_im_feedback_t = 2;
pub const xcb_im_feedback_t_XCB_XIM_HIGHLIGHT: xcb_im_feedback_t = 4;
pub const xcb_im_feedback_t_XCB_XIM_PRIMARY: xcb_im_feedback_t = 32;
pub const xcb_im_feedback_t_XCB_XIM_SECONDARY: xcb_im_feedback_t = 64;
pub const xcb_im_feedback_t_XCB_XIM_TERTIARY: xcb_im_feedback_t = 128;
pub const xcb_im_feedback_t_XCB_XIM_VISIBLE_TO_FORWARD: xcb_im_feedback_t = 256;
pub const xcb_im_feedback_t_XCB_XIM_VISIBLE_TO_BACKWORD: xcb_im_feedback_t = 512;
pub const xcb_im_feedback_t_XCB_XIM_VISIBLE_TO_CENTER: xcb_im_feedback_t = 1024;
pub type xcb_im_feedback_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_trigger_keys_t {
    pub nKeys: u16,
    pub keys: *mut xcb_im_ximtriggerkey_fr_t,
}
pub type xcb_im_trigger_keys_t = _xcb_im_trigger_keys_t;
pub type __cpu_mask = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_connection_t {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_generic_event_t {
    pub response_type: u8,
    pub pad0: u8,
    pub sequence: u16,
    pub pad: [u32; 7usize],
    pub full_sequence: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_void_cookie_t {
    pub sequence: ::std::os::raw::c_uint,
}
pub type xcb_window_t = u32;
pub type xcb_colormap_t = u32;
pub type xcb_timestamp_t = u32;
pub type xcb_keysym_t = u32;
pub type xcb_keycode_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_point_t {
    pub x: i16,
    pub y: i16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_rectangle_t {
    pub x: i16,
    pub y: i16,
    pub width: u16,
    pub height: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcb_key_press_event_t {
    pub response_type: u8,
    pub detail: xcb_keycode_t,
    pub sequence: u16,
    pub time: xcb_timestamp_t,
    pub root: xcb_window_t,
    pub event: xcb_window_t,
    pub child: xcb_window_t,
    pub root_x: i16,
    pub root_y: i16,
    pub event_x: i16,
    pub event_y: i16,
    pub state: u16,
    pub same_screen: u8,
    pub pad0: u8,
}
extern "C" {
    pub fn xcb_copy_colormap_and_free(
        c: *mut xcb_connection_t,
        mid: xcb_colormap_t,
        src_cmap: xcb_colormap_t,
    ) -> xcb_void_cookie_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_xim_t {
    _unused: [u8; 0],
}
pub type xcb_xim_t = _xcb_xim_t;
pub type xcb_xic_t = u16;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_xim_nested_list {
    pub data: *mut u8,
    pub length: usize,
}
pub type xcb_xim_nested_list = _xcb_xim_nested_list;
pub type xcb_xim_set_event_mask_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        forward_event_mask: u32,
        synchronous_event_mask: u32,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type xcb_xim_forward_event_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        event: *mut xcb_key_press_event_t,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type xcb_xim_commit_string_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        flag: u32,
        str_: *mut ::std::os::raw::c_char,
        length: u32,
        keysym: *mut u32,
        nKeySym: usize,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type xcb_xim_geometry_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, ic: xcb_xic_t, user_data: *mut ::std::os::raw::c_void),
>;
pub type xcb_xim_preedit_start_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, ic: xcb_xic_t, user_data: *mut ::std::os::raw::c_void),
>;
pub type xcb_xim_preedit_draw_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        frame: *mut xcb_im_preedit_draw_fr_t,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type xcb_xim_preedit_caret_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        frame: *mut xcb_im_preedit_caret_fr_t,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type xcb_xim_preedit_done_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, ic: xcb_xic_t, user_data: *mut ::std::os::raw::c_void),
>;
pub type xcb_xim_status_start_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, ic: xcb_xic_t, user_data: *mut ::std::os::raw::c_void),
>;
pub type xcb_xim_status_draw_text_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        frame: *mut xcb_im_status_draw_text_fr_t,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type xcb_xim_status_draw_bitmap_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        frame: *mut xcb_im_status_draw_bitmap_fr_t,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type xcb_xim_status_done_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, ic: xcb_xic_t, user_data: *mut ::std::os::raw::c_void),
>;
pub type xcb_xim_sync_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, ic: xcb_xic_t, user_data: *mut ::std::os::raw::c_void),
>;
pub type xcb_xim_disconnected_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, user_data: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_xim_im_callback {
    pub set_event_mask: xcb_xim_set_event_mask_callback,
    pub forward_event: xcb_xim_forward_event_callback,
    pub commit_string: xcb_xim_commit_string_callback,
    pub geometry: xcb_xim_geometry_callback,
    pub preedit_start: xcb_xim_preedit_start_callback,
    pub preedit_draw: xcb_xim_preedit_draw_callback,
    pub preedit_caret: xcb_xim_preedit_caret_callback,
    pub preedit_done: xcb_xim_preedit_done_callback,
    pub status_start: xcb_xim_status_start_callback,
    pub status_draw_text: xcb_xim_status_draw_text_callback,
    pub status_draw_bitmap: xcb_xim_status_draw_bitmap_callback,
    pub status_done: xcb_xim_status_done_callback,
    pub sync: xcb_xim_sync_callback,
    pub disconnected: xcb_xim_disconnected_callback,
}
pub type xcb_xim_im_callback = _xcb_xim_im_callback;
pub const _xcb_xim_trigger_key_type_t_XCB_XIM_IS_NOT_TRIGGER: _xcb_xim_trigger_key_type_t = 0;
pub const _xcb_xim_trigger_key_type_t_XCB_XIM_TRIGGER_ON_KEY: _xcb_xim_trigger_key_type_t = 1;
pub const _xcb_xim_trigger_key_type_t_XCB_XIM_TRIGGER_OFF_KEY: _xcb_xim_trigger_key_type_t = 2;
pub type _xcb_xim_trigger_key_type_t = ::std::os::raw::c_uint;
pub use self::_xcb_xim_trigger_key_type_t as xcb_xim_trigger_key_type_t;
pub const _xcb_xim_encoding_t_XCB_XIM_COMPOUND_TEXT: _xcb_xim_encoding_t = 0;
pub const _xcb_xim_encoding_t_XCB_XIM_UTF8_STRING: _xcb_xim_encoding_t = 1;
pub type _xcb_xim_encoding_t = ::std::os::raw::c_uint;
pub use self::_xcb_xim_encoding_t as xcb_xim_encoding_t;
pub type xcb_xim_open_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, user_data: *mut ::std::os::raw::c_void),
>;
pub type xcb_xim_create_ic_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, ic: xcb_xic_t, user_data: *mut ::std::os::raw::c_void),
>;
pub type xcb_xim_get_im_values_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_xim_t,
        reply: *mut xcb_im_get_im_values_reply_fr_t,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type xcb_xim_get_ic_values_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        reply: *mut xcb_im_get_ic_values_reply_fr_t,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type xcb_xim_set_ic_values_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, ic: xcb_xic_t, user_data: *mut ::std::os::raw::c_void),
>;
pub type xcb_xim_destroy_ic_callback = ::std::option::Option<
    unsafe extern "C" fn(im: *mut xcb_xim_t, ic: xcb_xic_t, user_data: *mut ::std::os::raw::c_void),
>;
pub type xcb_xim_reset_ic_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        reply: *mut xcb_im_reset_ic_reply_fr_t,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn xcb_xim_create(
        conn: *mut xcb_connection_t,
        screen_id: ::std::os::raw::c_int,
        imname: *const ::std::os::raw::c_char,
    ) -> *mut xcb_xim_t;
}
extern "C" {
    pub fn xcb_xim_set_log_handler(
        im: *mut xcb_xim_t,
        logger: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char, ...),
        >,
    );
}
extern "C" {
    pub fn xcb_xim_set_use_compound_text(im: *mut xcb_xim_t, enable: bool);
}
extern "C" {
    pub fn xcb_xim_set_use_utf8_string(im: *mut xcb_xim_t, enable: bool);
}
extern "C" {
    pub fn xcb_xim_get_encoding(im: *mut xcb_xim_t) -> xcb_xim_encoding_t;
}
extern "C" {
    pub fn xcb_xim_destroy(im: *mut xcb_xim_t);
}
extern "C" {
    pub fn xcb_xim_open(
        im: *mut xcb_xim_t,
        callback: xcb_xim_open_callback,
        auto_connect: bool,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn xcb_xim_set_im_callback(
        im: *mut xcb_xim_t,
        callbacks: *const xcb_xim_im_callback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn xcb_xim_filter_event(im: *mut xcb_xim_t, event: *mut xcb_generic_event_t) -> bool;
}
extern "C" {
    pub fn xcb_xim_check_trigger_key(
        im: *mut xcb_xim_t,
        keysym: xcb_keysym_t,
        modifier: u32,
        idx: *mut u32,
    ) -> xcb_xim_trigger_key_type_t;
}
extern "C" {
    pub fn xcb_xim_check_trigger_on_key(
        im: *mut xcb_xim_t,
        keysym: xcb_keysym_t,
        modifier: u32,
        idx: *mut u32,
    ) -> bool;
}
extern "C" {
    pub fn xcb_xim_check_trigger_off_key(
        im: *mut xcb_xim_t,
        keysym: xcb_keysym_t,
        modifier: u32,
        idx: *mut u32,
    ) -> bool;
}
extern "C" {
    pub fn xcb_xim_trigger_notify(im: *mut xcb_xim_t, ic: xcb_xic_t, idx: u32, off: bool) -> bool;
}
extern "C" {
    pub fn xcb_xim_get_im_values(
        im: *mut xcb_xim_t,
        callback: xcb_xim_get_im_values_callback,
        user_data: *mut ::std::os::raw::c_void,
        ...
    ) -> bool;
}
extern "C" {
    pub fn xcb_xim_create_nested_list(im: *mut xcb_xim_t, ...) -> xcb_xim_nested_list;
}
extern "C" {
    pub fn xcb_xim_create_ic(
        im: *mut xcb_xim_t,
        callback: xcb_xim_create_ic_callback,
        user_data: *mut ::std::os::raw::c_void,
        ...
    ) -> bool;
}
extern "C" {
    pub fn xcb_xim_get_ic_values(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        callback: xcb_xim_get_ic_values_callback,
        user_data: *mut ::std::os::raw::c_void,
        ...
    ) -> bool;
}
extern "C" {
    pub fn xcb_xim_set_ic_values(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        callback: xcb_xim_set_ic_values_callback,
        user_data: *mut ::std::os::raw::c_void,
        ...
    ) -> bool;
}
extern "C" {
    pub fn xcb_xim_set_ic_focus(im: *mut xcb_xim_t, ic: xcb_xic_t) -> bool;
}
extern "C" {
    pub fn xcb_xim_unset_ic_focus(im: *mut xcb_xim_t, ic: xcb_xic_t) -> bool;
}
extern "C" {
    pub fn xcb_xim_forward_event(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        event: *mut xcb_key_press_event_t,
    ) -> bool;
}
extern "C" {
    pub fn xcb_xim_reset_ic(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        callback: xcb_xim_reset_ic_callback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn xcb_xim_destroy_ic(
        im: *mut xcb_xim_t,
        ic: xcb_xic_t,
        callback: xcb_xim_destroy_ic_callback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    pub fn xcb_xim_close(im: *mut xcb_xim_t);
}
extern "C" {
    pub fn xcb_xim_support_extension(im: *mut xcb_xim_t, major_code: u16, minor_code: u16) -> bool;
}
extern "C" {
    pub fn xcb_xim_ext_move(im: *mut xcb_xim_t, ic: xcb_xic_t, x: i16, y: i16) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_styles_t {
    pub nStyles: u32,
    pub styles: *mut u32,
}
pub type xcb_im_styles_t = _xcb_im_styles_t;
pub type xcb_im_encoding_t = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_encodings_t {
    pub nEncodings: ::std::os::raw::c_ushort,
    pub encodings: *mut xcb_im_encoding_t,
}
pub type xcb_im_encodings_t = _xcb_im_encodings_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_t {
    _unused: [u8; 0],
}
pub type xcb_im_t = _xcb_im_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_input_context_t {
    _unused: [u8; 0],
}
pub type xcb_im_input_context_t = _xcb_im_input_context_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_client_t {
    _unused: [u8; 0],
}
pub type xcb_im_client_t = _xcb_im_client_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_preedit_attr_t {
    pub area: xcb_rectangle_t,
    pub area_needed: xcb_rectangle_t,
    pub spot_location: xcb_point_t,
    pub colormap: xcb_colormap_t,
    pub foreground: u32,
    pub background: u32,
    pub bg_pixmap: xcb_window_t,
    pub line_space: u32,
}
pub type xcb_im_preedit_attr_t = _xcb_im_preedit_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xcb_im_status_attr_t {
    pub area: xcb_rectangle_t,
    pub area_needed: xcb_rectangle_t,
    pub spot_location: xcb_point_t,
    pub colormap: xcb_colormap_t,
    pub foreground: u32,
    pub background: u32,
    pub bg_pixmap: xcb_window_t,
    pub line_space: u32,
}
pub type xcb_im_status_attr_t = _xcb_im_status_attr_t;
pub type xcb_im_callback = ::std::option::Option<
    unsafe extern "C" fn(
        im: *mut xcb_im_t,
        client: *mut xcb_im_client_t,
        ic: *mut xcb_im_input_context_t,
        hdr: *const xcb_im_packet_header_fr_t,
        frame: *mut ::std::os::raw::c_void,
        arg: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type xcb_im_free_function =
    ::std::option::Option<unsafe extern "C" fn(memory: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn xcb_im_create(
        conn: *mut xcb_connection_t,
        screen: ::std::os::raw::c_int,
        serverWindow: xcb_window_t,
        serverName: *const ::std::os::raw::c_char,
        locale: *const ::std::os::raw::c_char,
        inputStyles: *const xcb_im_styles_t,
        onKeysList: *const xcb_im_trigger_keys_t,
        offKeysList: *const xcb_im_trigger_keys_t,
        encodingList: *const xcb_im_encodings_t,
        event_mask: u32,
        callback: xcb_im_callback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut xcb_im_t;
}
extern "C" {
    pub fn xcb_im_set_log_handler(
        im: *mut xcb_im_t,
        logger: ::std::option::Option<
            unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char, ...),
        >,
    );
}
extern "C" {
    pub fn xcb_im_set_use_sync_mode(im: *mut xcb_im_t, sync: bool);
}
extern "C" {
    pub fn xcb_im_set_use_sync_event(im: *mut xcb_im_t, sync: bool);
}
extern "C" {
    pub fn xcb_im_open_im(im: *mut xcb_im_t) -> bool;
}
extern "C" {
    pub fn xcb_im_filter_event(im: *mut xcb_im_t, event: *mut xcb_generic_event_t) -> bool;
}
extern "C" {
    pub fn xcb_im_close_im(im: *mut xcb_im_t);
}
extern "C" {
    pub fn xcb_im_destroy(im: *mut xcb_im_t);
}
extern "C" {
    pub fn xcb_im_forward_event(
        im: *mut xcb_im_t,
        ic: *mut xcb_im_input_context_t,
        event: *mut xcb_key_press_event_t,
    );
}
extern "C" {
    pub fn xcb_im_commit_string(
        im: *mut xcb_im_t,
        ic: *mut xcb_im_input_context_t,
        flag: u32,
        str_: *const ::std::os::raw::c_char,
        length: u32,
        keysym: u32,
    );
}
extern "C" {
    pub fn xcb_im_geometry_callback(im: *mut xcb_im_t, ic: *mut xcb_im_input_context_t);
}
extern "C" {
    pub fn xcb_im_preedit_start_callback(im: *mut xcb_im_t, ic: *mut xcb_im_input_context_t);
}
extern "C" {
    pub fn xcb_im_preedit_draw_callback(
        im: *mut xcb_im_t,
        ic: *mut xcb_im_input_context_t,
        frame: *mut xcb_im_preedit_draw_fr_t,
    );
}
extern "C" {
    pub fn xcb_im_preedit_caret_callback(
        im: *mut xcb_im_t,
        ic: *mut xcb_im_input_context_t,
        frame: *mut xcb_im_preedit_caret_fr_t,
    );
}
extern "C" {
    pub fn xcb_im_preedit_done_callback(im: *mut xcb_im_t, ic: *mut xcb_im_input_context_t);
}
extern "C" {
    pub fn xcb_im_status_start_callback(im: *mut xcb_im_t, ic: *mut xcb_im_input_context_t);
}
extern "C" {
    pub fn xcb_im_status_draw_text_callback(
        im: *mut xcb_im_t,
        ic: *mut xcb_im_input_context_t,
        frame: *mut xcb_im_status_draw_text_fr_t,
    );
}
extern "C" {
    pub fn xcb_im_status_draw_bitmap_callback(
        im: *mut xcb_im_t,
        ic: *mut xcb_im_input_context_t,
        frame: *mut xcb_im_status_draw_bitmap_fr_t,
    );
}
extern "C" {
    pub fn xcb_im_status_done_callback(im: *mut xcb_im_t, ic: *mut xcb_im_input_context_t);
}
extern "C" {
    pub fn xcb_im_preedit_start(im: *mut xcb_im_t, ic: *mut xcb_im_input_context_t);
}
extern "C" {
    pub fn xcb_im_preedit_end(im: *mut xcb_im_t, ic: *mut xcb_im_input_context_t);
}
extern "C" {
    pub fn xcb_im_sync_xlib(im: *mut xcb_im_t, ic: *mut xcb_im_input_context_t);
}
extern "C" {
    pub fn xcb_im_support_extension(im: *mut xcb_im_t, major_code: u16, minor_code: u16) -> bool;
}
extern "C" {
    pub fn xcb_im_input_context_set_data(
        ic: *mut xcb_im_input_context_t,
        data: *mut ::std::os::raw::c_void,
        free_data_function: xcb_im_free_function,
    );
}
extern "C" {
    pub fn xcb_im_input_context_get_data(
        ic: *mut xcb_im_input_context_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xcb_im_input_context_get_input_style(ic: *mut xcb_im_input_context_t) -> u32;
}
extern "C" {
    pub fn xcb_im_input_context_get_client_window(ic: *mut xcb_im_input_context_t) -> xcb_window_t;
}
extern "C" {
    pub fn xcb_im_input_context_get_focus_window(ic: *mut xcb_im_input_context_t) -> xcb_window_t;
}
extern "C" {
    pub fn xcb_im_input_context_get_preedit_attr(
        ic: *mut xcb_im_input_context_t,
    ) -> *const xcb_im_preedit_attr_t;
}
extern "C" {
    pub fn xcb_im_input_context_get_status_attr(
        ic: *mut xcb_im_input_context_t,
    ) -> *const xcb_im_status_attr_t;
}
extern "C" {
    pub fn xcb_im_input_context_get_preedit_attr_mask(ic: *mut xcb_im_input_context_t) -> u32;
}
extern "C" {
    pub fn xcb_im_input_context_get_status_attr_mask(ic: *mut xcb_im_input_context_t) -> u32;
}
